
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package lighthouse;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import lighthouse.Instance;
import lighthouse.Predicate;
import LHExceptions.ParserExceptions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\022\002\000\002\021" +
    "\002\000\002\021\005\000\002\024\003\000\002\024\002" +
    "\000\002\025\003\000\002\025\002\000\002\026\003\000" +
    "\002\026\002\000\002\002\006\000\002\002\005\000\002" +
    "\002\005\000\002\003\005\000\002\003\003\000\002\004" +
    "\005\000\002\004\004\000\002\016\006\000\002\016\005" +
    "\000\002\011\006\000\002\017\006\000\002\017\005\000" +
    "\002\005\005\000\002\005\003\000\002\010\006\000\002" +
    "\010\007\000\002\010\005\000\002\010\006\000\002\020" +
    "\005\000\002\020\003\000\002\014\006\000\002\014\005" +
    "\000\002\013\004\000\002\013\003\000\002\012\012\000" +
    "\002\012\011\000\002\006\006\000\002\006\005\000\002" +
    "\007\006\000\002\023\003\000\002\015\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\014\uffff\024\006\001\002\000\004\014" +
    "\000\001\002\000\004\002\011\001\002\000\004\030\007" +
    "\001\002\000\004\024\010\001\002\000\010\002\ufffe\014" +
    "\ufffe\015\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\014\013\001\002\000\010\003\131\005\126\026\127\001" +
    "\002\000\004\006\016\001\002\000\004\025\100\001\002" +
    "\000\006\005\017\026\020\001\002\000\004\026\020\001" +
    "\002\000\004\011\026\001\002\000\010\004\uffe0\025\uffe0" +
    "\026\uffe0\001\002\000\010\004\024\025\ufffc\026\020\001" +
    "\002\000\010\004\uffe1\025\uffe1\026\uffe1\001\002\000\026" +
    "\002\ufffd\004\ufffd\006\ufffd\010\ufffd\013\ufffd\016\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\001\002\000\004\025\uffe2" +
    "\001\002\000\006\012\030\026\027\001\002\000\012\004" +
    "\uffe4\012\uffe4\013\uffe4\020\uffe4\001\002\000\006\007\ufffa" +
    "\021\035\001\002\000\006\012\033\020\032\001\002\000" +
    "\004\026\071\001\002\000\006\007\ufffa\021\035\001\002" +
    "\000\004\007\037\001\002\000\004\007\ufffb\001\002\000" +
    "\004\010\063\001\002\000\004\005\040\001\002\000\012" +
    "\004\024\010\ufffc\023\044\026\042\001\002\000\024\002" +
    "\uffea\004\uffea\010\uffea\016\uffea\020\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\001\002\000\004\011\056\001\002\000" +
    "\010\004\024\010\ufffc\020\053\001\002\000\004\026\046" +
    "\001\002\000\004\010\uffdc\001\002\000\004\011\047\001" +
    "\002\000\006\012\050\026\027\001\002\000\024\002\uffe6" +
    "\004\uffe6\010\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\001\002\000\006\012\052\020\032\001\002" +
    "\000\024\002\uffe8\004\uffe8\010\uffe8\016\uffe8\020\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002\000\006\023\044" +
    "\026\042\001\002\000\004\010\uffdd\001\002\000\024\002" +
    "\uffeb\004\uffeb\010\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\001\002\000\006\012\057\026\027\001" +
    "\002\000\024\002\uffe7\004\uffe7\010\uffe7\016\uffe7\020\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\001\002\000\006\012" +
    "\061\020\032\001\002\000\024\002\uffe9\004\uffe9\010\uffe9" +
    "\016\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\001" +
    "\002\000\012\004\ufff8\022\070\025\ufff8\026\ufff8\001\002" +
    "\000\004\005\064\001\002\000\006\023\044\026\042\001" +
    "\002\000\014\004\024\020\053\022\ufffc\025\ufffc\026\ufffc" +
    "\001\002\000\012\004\uffdb\022\uffdb\025\uffdb\026\uffdb\001" +
    "\002\000\010\004\uffdf\025\uffdf\026\uffdf\001\002\000\010" +
    "\004\ufff9\025\ufff9\026\ufff9\001\002\000\012\004\uffe5\012" +
    "\uffe5\013\uffe5\020\uffe5\001\002\000\004\007\037\001\002" +
    "\000\004\010\063\001\002\000\012\004\ufff8\022\070\025" +
    "\ufff8\026\ufff8\001\002\000\010\004\uffde\025\uffde\026\uffde" +
    "\001\002\000\010\004\024\025\ufffc\026\020\001\002\000" +
    "\004\025\uffe3\001\002\000\006\015\uffda\024\uffda\001\002" +
    "\000\006\015\uffff\024\006\001\002\000\004\015\104\001" +
    "\002\000\004\013\111\001\002\000\004\005\105\001\002" +
    "\000\010\004\024\013\ufffc\026\027\001\002\000\004\013" +
    "\uffec\001\002\000\010\004\024\013\ufffc\020\032\001\002" +
    "\000\004\013\uffed\001\002\000\004\005\122\001\002\000" +
    "\004\016\114\001\002\000\006\002\uffff\024\006\001\002" +
    "\000\004\005\115\001\002\000\006\023\044\026\042\001" +
    "\002\000\012\002\ufffc\004\024\020\053\024\ufffc\001\002" +
    "\000\006\002\uffee\024\uffee\001\002\000\004\002\000\001" +
    "\002\000\004\002\uffd9\001\002\000\012\004\024\016\ufffc" +
    "\023\044\026\042\001\002\000\010\004\024\016\ufffc\020" +
    "\053\001\002\000\004\016\uffef\001\002\000\004\016\ufff0" +
    "\001\002\000\004\026\127\001\002\000\004\017\137\001" +
    "\002\000\010\004\024\006\ufffc\020\134\001\002\000\006" +
    "\004\024\006\ufffc\001\002\000\010\004\ufff3\006\ufff3\020" +
    "\ufff3\001\002\000\004\006\ufff5\001\002\000\004\026\127" +
    "\001\002\000\004\006\ufff6\001\002\000\010\004\ufff4\006" +
    "\ufff4\020\ufff4\001\002\000\012\004\ufff1\006\ufff1\020\ufff1" +
    "\027\140\001\002\000\010\004\ufff2\006\ufff2\020\ufff2\001" +
    "\002\000\010\004\024\006\ufffc\020\134\001\002\000\004" +
    "\006\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\015\004\021\003\001\001\000\004\022" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\013\001\001\000\006\003\127\004\131\001\001\000\004" +
    "\014\014\001\001\000\004\023\100\001\001\000\006\012" +
    "\020\013\021\001\001\000\006\012\020\013\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\022\024" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\030\001\001\000\002\001\001\000" +
    "\004\025\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\033\001\001\000\004\006\035\001\001\000" +
    "\002\001\001\000\004\007\061\001\001\000\002\001\001" +
    "\000\010\005\042\010\040\024\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\066\001" +
    "\001\000\002\001\001\000\006\005\064\010\040\001\001" +
    "\000\004\024\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\072" +
    "\001\001\000\004\007\073\001\001\000\004\026\074\001" +
    "\001\000\002\001\001\000\006\012\022\024\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\101\001" +
    "\001\000\004\017\102\001\001\000\004\016\111\001\001" +
    "\000\002\001\001\000\006\020\106\024\105\001\001\000" +
    "\002\001\001\000\004\024\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\112\001\001\000\004\021" +
    "\117\001\001\000\002\001\001\000\006\005\115\010\040" +
    "\001\001\000\004\024\116\001\001\000\002\001\001\000" +
    "\004\022\120\001\001\000\002\001\001\000\010\005\122" +
    "\010\040\024\123\001\001\000\004\024\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\140\004\131" +
    "\001\001\000\002\001\001\000\004\024\134\001\001\000" +
    "\004\024\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\141" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




Instance i = new Instance();

public Instance getInstance(){
return i ;
}

private String filename(){
    
    Lexer l = (Lexer) this.getScanner();
    return l.getFilename();
}
public String getWhere(){

    Lexer l = (Lexer) this.getScanner();
    return (l.getFilename()+" line "+(l.getLine()+1)+" col: "+(l.getColumn()+1));
}

public void printWhere(){

    Lexer l = (Lexer) this.getScanner();
    System.out.println("Line "+(l.getLine()+1)+" col: "+(l.getColumn()+1));
}
 public void report_fatal_error(String message, Object info){
    //printWhere();
    report_error(message,info);
    throw new SyntaxErrorError("Syntax error");
    //super.report_fatal_error("",info);
}


@Override
	protected void report_expected_token_ids() {
	  List<Integer> ids = expected_token_ids();
	  LinkedList<String> list = new LinkedList<String>();
	  for (Integer expected : ids)
		  list.add(symbl_name_from_id(expected));
	  String msg = "instead expected token classes are " + list + "error token is "+ symbl_name_from_id(super.cur_token.sym);
	  System.err.println(msg);
//errMan.Error(ErrorSource.Parser, msg);
	}

private void warningMissing(String str){
System.err.println("WARNING: Missing \""+str+"\" in "+getWhere());
}
private void error(String str){
System.err.println("ERROR:  "+str);
throw new SyntaxErrorError("Syntax error");
}

private void abort(){
System.exit(1);
}

protected int error_sync_size(){
return 1;
}
    

public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
        m.append(filename());
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
        //super.report_error("",info);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PDDL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // runscripts ::= 
            {
              Object RESULT =null;
		i.runScripts();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("runscripts",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // script ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("script",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= SCRIPTBOUND SCRIPTCODE SCRIPTBOUND 
            {
              Object RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(code);i.addScript(code);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("script",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optSemi ::= SEMI 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optSemi",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optSemi ::= 
            {
              Object RESULT =null;
		warningMissing(";");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optSemi",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optLCurly ::= LCURLY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optLCurly",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optLCurly ::= 
            {
              Object RESULT =null;
		warningMissing("{");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optLCurly",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optRCurly ::= RCURLY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optRCurly",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optRCurly ::= 
            {
              Object RESULT =null;
		warningMissing("}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optRCurly",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // predicatesdecl ::= PREDICATES COL predicateDeclarationList optSemi 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicatesdecl",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // predicatesdecl ::= PREDICATES predicateDeclarationList optSemi 
            {
              Object RESULT =null;
		warningMissing(":"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicatesdecl",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // predicatesdecl ::= PREDICATES error optSemi 
            {
              Object RESULT =null;
		 error("syntax error in the predicate declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicatesdecl",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicateDeclarationList ::= predicateDeclarationList COMMA predicateDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicateDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicateDeclarationList ::= predicateDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicateDeclarationList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicateDeclaration ::= ID SLASH NUMBER 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		i.registerPredicate(name,num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicateDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicateDeclaration ::= ID SLASH 
            {
              Object RESULT =null;
		 error("Missing number, should be predicate/arity"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicateDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initialdecl ::= INITIAL COL predicates optSemi 
            {
              Object RESULT =null;
		int pcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> pcs = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  i.setInitial(pcs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialdecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // initialdecl ::= INITIAL COL optSemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialdecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // finaldecl ::= FINAL COL predicates optSemi 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> p = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 i.setFinal(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finaldecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constantsdecl ::= CONSTANTS COL mixlist optSemi 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> cl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  for (String c : cl){ i.registerConstant(c); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantsdecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constantsdecl ::= CONSTANTS COL optSemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantsdecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // predicates ::= predicates COMMA predicate 
            {
              List<PredicateInst> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<PredicateInst> pp = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PredicateInst p = (PredicateInst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; pp.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicates",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // predicates ::= predicate 
            {
              List<PredicateInst> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PredicateInst p = (PredicateInst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<PredicateInst>(); RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicates",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // predicate ::= ID LPAREN mixlist RPAREN 
            {
              PredicateInst RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> cl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PredicateInst(pname,cl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // predicate ::= MINUS ID LPAREN mixlist RPAREN 
            {
              PredicateInst RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> cl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PredicateInst(pname,cl,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // predicate ::= ID LPAREN RPAREN 
            {
              PredicateInst RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new PredicateInst(pname,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // predicate ::= MINUS ID LPAREN RPAREN 
            {
              PredicateInst RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new PredicateInst(pname,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mixlist ::= mixlist COMMA ID 
            {
              List<String> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> m = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = m ; m.add(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixlist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mixlist ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixlist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // actiondecl ::= ACTIONS COL actionlist optSemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actiondecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // actiondecl ::= ACTIONS actionlist optSemi 
            {
              Object RESULT =null;
		 warningMissing(":"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actiondecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // actionlist ::= actionlist actiond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // actionlist ::= actiond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // actiond ::= ID LPAREN mixlist RPAREN optLCurly precond postcond optRCurly 
            {
              Object RESULT =null;
		int actionNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int actionNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String actionName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> varList = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<PredicateInst> pre = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> post = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 i.registerAction(actionName,varList,pre,post); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actiond",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // actiond ::= ID LPAREN RPAREN optLCurly precond postcond optRCurly 
            {
              Object RESULT =null;
		int actionNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int actionNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String actionName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<PredicateInst> pre = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> post = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 i.registerAction(actionName,null,pre,post); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actiond",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precond ::= PRE COL predicates optSemi 
            {
              List<PredicateInst> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> pp = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("precond",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precond ::= PRE COL optSemi 
            {
              List<PredicateInst> RESULT =null;
		RESULT = new LinkedList<PredicateInst>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("precond",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // postcond ::= POST COL predicates optSemi 
            {
              List<PredicateInst> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<PredicateInst> pp = (List<PredicateInst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postcond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fileBreak ::= MANEOF 
            {
              Object RESULT =null;
		
//System.out.println("reached end of file");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fileBreak",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PDDL ::= script runscripts predicatesdecl actiondecl fileBreak script constantsdecl initialdecl finaldecl script runscripts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PDDL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
